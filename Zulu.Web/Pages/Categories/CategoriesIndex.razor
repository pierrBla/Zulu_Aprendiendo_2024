@page "/categories"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager


<h3>Categoria</h3>

<a class="btn btn-primary" href="/categories/create">Nueva Categoria</a>


        <GenericList MyList="Categories">
            <Body>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Botones</th>
                            <th>Categoria</th>
                        </tr>
                    </thead>
                    <tbody>
                @foreach (var category in Categories!)
                        {
                            <tr>
                                <td>
                            <a class="btn btn-warning" href="/categories/edit/@category.Id">Editar</a>
                            <button class="btn btn-danger" @onclick=@(()=>DeleteAsync(category.Id))>Borrar</button>
                                </td>
                                <td>
                                    @category.Name
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

            </Body>

        </GenericList>

        @code {
        //crear una propieda de lista
        //? poner  si son nulo

        public List<Category>? Categories { get; set; }

        //llamamos override usamos oninitiallizeasync
        protected override async Task OnInitializedAsync()
        {
            await LoadAsync();
        }

        private async Task LoadAsync()
        {
        var responseHttp = await repository.Get<List<Category>>("api/categories");
              Categories = responseHttp.Response;
        }

        private async Task DeleteAsync(int id)
        {
            var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmacion",
                Text = "¿Deseas Eliminar el  Registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"

            });
            var confirm = string.IsNullOrEmpty(result.Value);
            if (confirm)
            {
                return;
            }
            var responseHttp = await repository.Delete($"/api/categories/{id}");
            if (responseHttp.Error)
            {
                if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
                {
                    var message = await responseHttp.GetErrorMessageAsync();
                    await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                    return;
                }
            }
            await LoadAsync();
        }
}
